// Copyright 2024 Francis Michael Stephens. All rights reserved.  Use of this
// source code is governed by an MIT license that can be found in the LICENSE
// file.

package intern

import (
	"math"
	"strconv"
)

type float64Interner struct {
	interner InternerWithUint64Id[Float64Converter]
	fmt      byte
	prec     int
	bitSize  int
}

func NewFloat64Interner(config Config, fmt byte, prec, bitSize int) Interner[float64] {
	return &float64Interner{
		interner: NewInternerWithUint64Id[Float64Converter](config),
		fmt:      fmt,
		prec:     prec,
		bitSize:  bitSize,
	}
}

func (i *float64Interner) Get(value float64) string {
	return i.interner.Get(NewFloat64Converter(value, i.fmt, i.prec, i.bitSize))
}

func (i *float64Interner) GetStats() StatsSummary {
	return i.interner.GetStats()
}

var _ ConverterWithUint64Id = Float64Converter{}

// A flexible converter for float64 values. Here the identity is generated by a
// call to math.Float64bits(...) and we convert the value into a string using
// strconv.FormatFloat(...)
type Float64Converter struct {
	value   float64
	fmt     byte
	prec    int
	bitSize int
}

func NewFloat64Converter(value float64, fmt byte, prec, bitSize int) Float64Converter {
	return Float64Converter{
		value:   value,
		fmt:     fmt,
		prec:    prec,
		bitSize: bitSize,
	}
}

func (c Float64Converter) Identity() uint64 {
	return math.Float64bits(c.value)
}

func (c Float64Converter) String() string {
	return strconv.FormatFloat(c.value, c.fmt, c.prec, c.bitSize)
}
